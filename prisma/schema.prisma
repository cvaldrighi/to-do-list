// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  username      String @unique
  password      String
  refresh_token RefreshToken?
}

model Task {
  id        Int        @id @default(autoincrement())
  title     String
  list      List       @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId    Int
  status    Status     @relation(fields: [statusId], references: [id], onDelete: Cascade)
  statusId  Int        @default(1)
  tags      TaskTags[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model List {
  id        Int      @id @default(autoincrement())
  title     String
  Task      Task[]
  Status    Status[]
  Tag       Tag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Status {
  id        Int      @id @default(autoincrement())
  title     String
  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId    Int
  Task      Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id     Int        @id @default(autoincrement())
  title  String
  color  String
  list   List       @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId Int
  tasks  TaskTags[]
}

model TaskTags {
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  taskId Int
  tagId  Int

  @@id([taskId, tagId])
}

model RefreshToken {
  id        String @id @default(uuid())
  expiresIn Int
  user      User   @relation(fields: [userId], references: [id])
  userId    Int    @unique
}
